[changelog]
# template for header
header = """
# Firmware Validation Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% if previous %}\
    {% if previous.commit_id %}
        {{ previous.commit_id | truncate(length=7, end="") }}...\
            {{ commit_id | truncate(length=7, end="") }}
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }} ({{ commit.id | truncate(length=7, end="") }})\
    {% endfor %}
{% endfor %}\n
"""
# template for footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""

trim = true

[git]
# This specifies a list of patterns that preprocesses commit messages before they are categorized.
commit_preprocessors = [
    { pattern = '</?([a-zA-Z]+)[^>]*>', replace = "$1"}
]
# Parse the commits based on https://www.conventionalcommits.org. This means the tool expects commit messages to follow the Conventional Commits specification.
conventional_commits = true
# This filters out commits that do not follow the conventional commit format, ensuring only structured commit messages are processed.
filter_unconventional = true
# The entire commit message is treated as a single unit.
split_commits = false
# Defines regular expressions used to match and categorize commit messages. Each parser looks for specific patterns in the commit messages and assigns the message to a particular group.
commit_parsers = [
  { message = "^fix", group = "Fixed" },
  { message = "^.*: add", group = "Added" },
  { message = "^.*: support", group = "Added" },
  { message = "^.*: remove", group = "Removed" },
  { message = "^.*: delete", group = "Removed" },
  { message = "^test", group = "Fixed" },
  { message = "^.*: fix", group = "Fixed" },
  { message = "^.*", group = "Changed" },
  { message = "^config", group = "Configuration" },
  { message = "^update", group = "Updated" },
  { message = "^refactor", group = "Refactoring" },
  { message = "^doc|readme", group = "Documentation" },
]
# This protects commits that introduce breaking changes from being filtered out by the parsers.
protect_breaking_commits = false
# This will exclude any commit that doesn't match the defined parsers, ensuring only grouped commits are included in the changelog.
filter_commits = false
# Regex pattern that defines how to match Git tags.
tag_pattern = "v[0-9].*"
# These define tags to skip / ignore during changelog generation.
skip_tags = "v0.1.0-beta.1"
ignore_tags = ""
# The tool sorts the tags chronologically.
topo_order = false
# Defines the order in which commits within section are displayed.
sort_commits = "oldest"

[remote.github]
owner="Dasharo"
repo="open-source-firmware-validation"
